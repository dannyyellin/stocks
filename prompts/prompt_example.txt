
III. Here is example code for a REST service that supports POST, GET, DELETE and PUT requests on "toys" using Python, Flask and MongoDB.
Each toy is a JSON object containing the fields name (of type string), descr (of type string), age (of type integer) , price (of type float), features (of type array, where element of the array is a string, and id (unique string id).


from flask import Flask, jsonify, request, make_response
import pymongo
from bson import ObjectId
import os


app = Flask(__name__)
client = pymongo.MongoClient('mongodb://mongo:27017/')
db = client['toys_inventory']
toysColl = db['toys']


@app.route('/toys', methods=['POST'])
def addToy():
    print("POST toys")
    sys.stdout.flush()
    try:
        content_type = request.headers.get('Content-Type')
        if content_type != 'application/json':
            return jsonify("{error: Expected application/json}"), 415
        data = request.get_json()
        required_fields = ['name', 'age', 'price']
        if not all(field in data for field in required_fields):
            return jsonify({"error": "Malformed data"}), 400
        if 'features' not in data:
            features = []
        else:
            features = data['features']
        if 'descr' not in data:
            descr = "Not Available"
        else:
            descr = data['descr']
        toy = {
            'name':data['name'],
            'descr':descr,
            'age':data['age'],
            'price':data['price'],
            'features':features
        }
        result = toysColl.insert_one(toy)
        id = str(result.inserted_id)
        response_data = {"id":id}
        return jsonify(response_data),201
    except Exception as e:
        return jsonify({"server error":str(e)}),500


@app.route('/toys', methods=['GET'])
def getToys():
    print("GET ALL request")
    sys.stdout.flush()
    try:
        query_params = request.args.to_dict()
        if query_params:
            if 'id' in query_params:
                print('query_params1 = ', query_params)
                query_params['_id'] = ObjectId(query_params["id"])
                del query_params["id"]
            if 'price' in query_params:
                query_params['price'] = float(query_params['price'])
            if 'age' in query_params:
                    query_params['age'] = int(query_params['age'])
        toys = toysColl.find(query_params)
        list_of_toy = list(toys)
        return_toys = []
        for toy in list_of_toy:
            toy['id'] = str(toy['_id'])
            del toy['_id']
            return_toys.append(toy)
        response = jsonify(return_toys)
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept')
        return response, 200
    except Exception as e:
        print("Exception: ", str(e))
        return jsonify({"server error": str(e)}), 500


@app.route('/toys/<string:toyid>', methods=['GET'])
def getToy(toyid):
    print("GET toys")
    sys.stdout.flush()
    try:
        record = toysColl.find_one({"_id": ObjectId(toyid)})
        if record:
            toy = {}
            for field in record:
                if field == "_id":
                    toy['id'] = str(record["_id"])
                else:
                    toy[field] = record[field]
            return jsonify(toy), 200
        else:
            print("GET request error: No such ID")
            return jsonify({"error": "Not found"}), 404
    except Exception as e:
        print("Exception: ", str(e))
        return jsonify({"server error":str(e)}),500


@app.route('/toys/<string:toyid>', methods=['DELETE'])
def delToy(toyid):
    print("DELETE toys")
    sys.stdout.flush()
    try:
        result = toysColl.delete_one({"_id": ObjectId(toyid)})
        if result.deleted_count > 0:
            return 'foo', 204
        else:
            return jsonify({"error": "Not found"}), 404
        return '', 204
    except Exception as e:
        print("Exception: ", str(e))
        return jsonify({"server error":str(e)}),500


@app.route('/toys/<string:toyid>', methods=['PUT'])
def update(toyid):
    print("PUT toys")
    try:
        content_type = request.headers.get('Content-Type')
        if content_type != 'application/json':
            return jsonify({"error":"Expected application/json media type"}), 415
        data = request.get_json()
        required_fields = ['name','age','price']
        if not all(field in data for field in required_fields):
            return jsonify({"error": "Malformed data"}), 400
        if 'features' not in data:
            features = []
        else:
            features = data['features']
        if 'descr' not in data:
            descr = "No description Available"
        else:
            descr = data['descr']
        toy = {
            'id': ObjectId(toyid),
            'name':data['name'],
            'descr': descr,
            "age": data["age"],
            'price': data['price'],
            'features': features
        }
        result = toysColl.find_one_and_update(
            {"_id": ObjectId(toyid)},
            {"$set": data},
            return_document=pymongo.ReturnDocument.AFTER
        )
        if result.keys():
            resp = {'id': str(result["_id"])}
            return jsonify(resp), 200
        else:
            return jsonify({"error": "Not found"}), 404
        response_data = {"id": toyid}
        return jsonify(response_data), 200
    except Exception as e:
        print("Exception: ", str(e))
        return jsonify({"server error":str(e)}),500

